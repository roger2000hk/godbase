* add maps.Any.While(func(Key, interface{}) bool) bool
** run dump/slurp tests
** commit dump/slurp

* ---

* add testfn to Delete
** only delete if testfn nil / returns true
** add DeleteAll(key) int

* add Tbl.UpsertedAt(Rec) time.Time
** add Basic.upsertedAt
** add to cols
** init incoming to time.Now() in Upsert()

* add Tbl.Revision(Rec) recs.Revision
** add Basic.revision
** add to cols
** init to 1 in Upsert if not exists, otherwise inc

* add cols.Bool
** add rec methods


* add Tbl.Delete()

* run rw lock test with race tool

* update poorslab

* add tbls/cols/recs to readme

* add cols.Bytes
* add cols.Float64


* add tbls.Wrap

* add tbls.Log wrap
** keep []Rec queue
** insert DeleteRec on delete

* ---

* add maps.Any.Clone(start, end, MapFn)
** like Cut, but clone elems

* add find loop in both maps in runCutTests

* add maps.RWHash
** keep one RWMutex per slot

* rename multi_test to full_test

* ---

* add idx support
** Idx interface
** BasicIdx wraps maps.Any
** provide range ops
*** runs within slot for hash types


* add Any.Clone(MapFn)
** panic for embedded imps
** only include elems for which fn returns non nil key

* copy maps to sets package
** no multi capability
** compare perf

* add locks.Locker
** keep HashMaps of RecId => Lock
*** one for readers, one for writers
** protect maps with Lock 

* add hash resizing

* add skip resizing
