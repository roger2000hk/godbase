* rename Tbl.Add to AddCol

* add Clear/Delete & Load events
** hook up in AddIdx

* add *Rc.NewResv(start, end, capac) *Resv
** add test

* add *Rc.Update(start, end, total, avail) (big.Rat, error)
** return min of avail / total if total != 0
* add resv test

* add resv loop perf test with unlimited resources

* load settings table to decide amount scale in remento
** add remento.InitDb(path)
*** create path if not exists
*** slurp setting tbl if exists
*** otherwise init with defaults
*** call in remento_test.init()

* add ref test

* rename fix.New to fix.NewInt64
* add fix.NewFloat64
* rename fix.Init to fix.SetBig
* add SetFloat64 / SetInt64

* add SliceCol
** take col type as param to cols.Slice()

* go on with remento
** add offset idx
** add slice(Ref) col ResvItems

* add MapCol
** take two col types as params to cols.Map()

* implement Dump/Load for idxs.Reverse
** copy tbls

* add Tbl.Delete()

* add remento project
** check old

* add tbls.Wrap

* add Cx
** take cx param in tbl.Insert/Delete
** take cx param in idx.Insert/Delete

* add tbls.Log wrap
* log delete/insert to disk

* add testfn to Delete
** only delete if testfn nil / returns true
** add DeleteAll(key) int

* add ListCol
** base on std list
** take col type as param

* add find loop in both maps in runCutTests

* copy maps to sets package
** no multi capability
** compare perf

* add hash slot resizing

* add sort level resizing

* update poorslab
