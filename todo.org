* add cols.Time
** add rec methods
** add recs.createdCol
** add to cols in tbl.init
*** add Rec.Created()
** init to time.Now() in rec.init

* add tbls.Basic.recs maps.Any
** take as constructor param

* add Tbl.Dump(io.Writer)
** write all recs

* add Tbl.Load(io.Writer)
** read until eof

* add Tbl.Upsert()

* add Tbl.Upserted(Rec) time.Time
** add Basic.upsertCol
** init to time.Now() in Upsert()

* add Tbl.RevisionCol()
** init to 1 if not exists, otherwise inc in Upsert()

* add cols.Bool
** add rec methods

* add cols.Bytes
* add cols.Float64


* add tbls/cols/recs to readme

* ---

* add testfn to Delete
** only delete if testfn nil / returns true
** add DeleteAll(key) int

* add find loop in both maps in runCutTests

* add maps.RWHash
** keep one RWMutex per slot

* rename multi_test to full_test

* ---

* add idx support
** Idx interface
** BasicIdx wraps maps.Any
** provide range ops
*** runs within slot for hash types


* add Any.Clone(MapFn)
** panic for embedded imps
** only include elems for which fn returns non nil key

* copy maps to sets package
** no multi capability
** compare perf

* add locks.Locker
** keep HashMaps of RecId => Lock
*** one for readers, one for writers
** protect maps with Lock 

* add hash resizing

* add skip resizing
